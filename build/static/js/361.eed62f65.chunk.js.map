{"version":3,"file":"static/js/361.eed62f65.chunk.js","mappings":"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","sources":["Utils/Text.js","Hooks/useGlobalState.jsx","components/BMCModule/TextInputField.jsx","components/BMCModule/EditInput.jsx","components/BMCModule/List.jsx","components/BMCModule/EditableDiv.jsx","components/BMCModule/BrainstormingSec.jsx","components/PDFReports.jsx/BMCPdf.jsx","components/BMCModule/Percentage.jsx","pages/BMCModule.jsx"],"sourcesContent":["const Text = {\r\n    firstBox: {\r\n        title: 'Key Partnerships',\r\n        questions: ['Who are your suppliers, partners, strategic alliances?\\n', 'What are your and their motivations for the partnership?\\n', 'What resources do you receive from suppliers?\\n']\r\n    },\r\n    secondBox: {\r\n        title: 'Key Activities',\r\n        questions: ['What activities do you perform to build your product?\\n', 'What every-day activities do you do to solve problems?\\n']\r\n    },\r\n    thirdBox: {\r\n        title: 'Value Propositions',\r\n        questions: ['What value are you bringing to your customers?\\n', `What's unique about your product?\\n`, 'What are the defferent values you bring to different customers?\\n']\r\n    },\r\n    forthBox: {\r\n        title: 'Customer Relationships',\r\n        questions: ['To what extent do you deliver customer care (personal assistance or self-services)?\\n', 'What channels for customer communication do you have?\\n']\r\n    },\r\n    fifthBox: {\r\n        title: 'Customer Segments',\r\n        questions: ['Who is your customer?', 'What are their problems?\\n', `What's their age, location, job?\\n`, 'What competitor product are they using?\\n']\r\n    },\r\n    sixthBox: {\r\n        title: 'Key Resources',\r\n        questions: ['What physical, human, and financial resources does your business need?\\n', 'What assets do you need to produce and deliver your product?\\n', 'What resources to perform key activities and use channels?\\n']\r\n    },\r\n    seventhBox: {\r\n        title: 'Channels',\r\n        questions: ['How do you let your future customers know about your product?\\n', 'How do you make your product reach your customers?\\n', 'Which supply channels are you using?\\n', 'What comminication channels are you using?\\n']\r\n    },\r\n    eightBox: {\r\n        title: 'Cost Structure',\r\n        questions: ['What costs you have to cover to create and deliver your product?\\n', 'How much of your cost structure is allocated for development, marketing, and the stuff?\\n']\r\n    },\r\n    ninthBox: {\r\n        title: 'Revenue Streams',\r\n        questions: ['How is your business monetized?', 'What revenue models are you using?\\n', 'What is the pricing strategy?\\n', 'What payment channels are you using?\\n']\r\n    }\r\n}\r\n\r\nmodule.exports = Text","import { GlobalState } from \"../context/globalState\";\r\nimport { useContext } from 'react';\r\n\r\n\r\nexport const useGlobalState = () => {\r\n    const context = useContext(GlobalState);\r\n\r\n    if (!context) {\r\n        throw Error('useAuthContext should be inside AuthContextProvider')\r\n    }\r\n\r\n    return context\r\n}","import { useEffect, useRef, useState } from 'react';\r\nimport { BiLink, BiUnlink } from 'react-icons/bi';\r\nimport { useGlobalState } from '../../Hooks/useGlobalState';\r\n\r\nconst limits = {\r\n    KeyPartnerships: 728,\r\n    KeyActivities: 364,\r\n    ValuePropositions: 728,\r\n    CustomerRelationships: 364,\r\n    CustomerSegments: 728,\r\n    Channels: 364,\r\n    KeyResources: 364,\r\n    RevenueStreams: 420,\r\n    CostStructure: 420,\r\n    BrainstormingNotes: 728\r\n}\r\n\r\nexport default function TextInputField({ setInpActive, objName }) {\r\n    const containerRef = useRef(null);\r\n    const [inpValue, setInpValue] = useState('');\r\n    const { dispatch, form } = useGlobalState()\r\n\r\n    const handleInput = (e) => {\r\n        const allowedTags = [\"i\", \"b\", \"a\"];\r\n        const parser = new DOMParser();\r\n        const doc = parser.parseFromString(e.target.innerHTML, \"text/html\");\r\n        let validatedContent = \"\";\r\n\r\n        for (let node of doc.body.childNodes) {\r\n            if (node.nodeType === Node.TEXT_NODE) {\r\n                validatedContent += node.textContent;\r\n            } else if (allowedTags.includes(node.tagName.toLowerCase())) {\r\n                const attrs = Array.from(node.attributes)\r\n                    .map((attr) => `${attr.name}=\"${attr.value}\"`)\r\n                    .join(\" \");\r\n                validatedContent += `<${node.tagName.toLowerCase()} ${attrs}>${node.textContent}</${node.tagName.toLowerCase()}>`;\r\n            }\r\n        }\r\n        if (e.target.innerHTML.startsWith('&nbsp;')) {\r\n            setInpValue('');\r\n        } else {\r\n            const maxLength = 28;\r\n            validatedContent = validatedContent.replace(new RegExp(`(.{${maxLength}})`, 'g'), '$1\\n');\r\n            setInpValue(validatedContent);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const handleEnter = (e) => {\r\n            if (e.keyCode === 13) {\r\n                if (inpValue === '') {\r\n                    setInpActive(false);\r\n                } else {\r\n                    const objLen = form[objName].list.length\r\n                    const inpArr = [inpValue]\r\n                    const totalLen = objLen + inpArr.length\r\n                    const lim = limits[objName] / 28\r\n                    // console.log({ totalLen, lim });\r\n                    if (totalLen <= lim) {\r\n                        dispatch({ type: \"UPDATEFORM\", payload: { ...form, [objName]: { list: [...form[objName].list, inpValue] } } })\r\n                        setInpActive(false);\r\n                    } else {\r\n                        console.log(\"Inp => Limitation exceeded!\");\r\n                        setInpActive(false);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        document.addEventListener('keydown', handleEnter);\r\n\r\n        const handleEsc = (e) => {\r\n            if (e.keyCode === 27) {\r\n                setInpActive(false);\r\n            }\r\n        };\r\n        document.addEventListener('keydown', handleEsc);\r\n\r\n        function handleClickOutside(e) {\r\n            if (containerRef.current && !containerRef.current.contains(e.target)) {\r\n                if (inpValue === '') {\r\n                    setInpActive(false);\r\n                } else {\r\n                    const objLen = form[objName].list.length\r\n                    const inpArr = [inpValue]\r\n                    const totalLen = objLen + inpArr.length\r\n                    const lim = limits[objName] / 28\r\n                    // console.log({ totalLen, lim });\r\n                    if (totalLen <= lim) {\r\n                        dispatch({ type: \"UPDATEFORM\", payload: { ...form, [objName]: { list: [...form[objName].list, inpValue] } } })\r\n                        setInpActive(false);\r\n                    } else {\r\n                        console.log(\"Inp => Limitation exceeded!\");\r\n                        setInpActive(false);\r\n                    }\r\n                    // setText([...text, inpValue]);\r\n                    // setInpActive(false);\r\n                    // dispatch({ type: \"UPDATEFORM\", payload: { ...form, [objName]: { list: [...form[objName].list, inpValue] } } })\r\n                }\r\n            }\r\n        }\r\n        document.addEventListener('mousedown', handleClickOutside);\r\n        return () => {\r\n            document.removeEventListener('keydown', handleEsc);\r\n            document.removeEventListener('keydown', handleEnter);\r\n            document.removeEventListener('mousedown', handleClickOutside);\r\n        };\r\n    }, [setInpActive, containerRef, inpValue, dispatch, objName, form]);\r\n\r\n    const handleFontStyle = (fontStyle) => {\r\n        document.execCommand(fontStyle, false, null);\r\n    };\r\n\r\n    const handleFontLink = (fontLink) => {\r\n        const links = prompt('Inset Link');\r\n        document.execCommand(fontLink, false, links);\r\n    };\r\n\r\n    const handleFontUnLink = (fontUnLink) => {\r\n        document.execCommand(fontUnLink, false, '');\r\n    };\r\n    return (\r\n        <div ref={containerRef}>\r\n            <div className='flex'>\r\n                <div\r\n                    role='textbox'\r\n                    title='Type a message'\r\n                    data-placeholder=\"Click here and type ...\"\r\n                    contentEditable={true}\r\n                    onClick={() => setInpActive(true)}\r\n                    onInput={handleInput}\r\n                    className={`input_text_editor px-5 py-1 focus:border-none bg-gray-50 break-all w-full active:border-none outline-none`}\r\n                />\r\n            </div>\r\n            <div className='flex justify-center items-center border border-gray-500 rounded-md max-w-[150px] m-2 bg-white'>\r\n                <button\r\n                    onClick={() => handleFontStyle('bold')}\r\n                    className=\"flex justify-center items-center font-bold hover:bg-gray-200 text-xl h-10 w-10 rounded-md\">\r\n                    B\r\n                </button>\r\n                <button\r\n                    onClick={() => handleFontStyle('italic')}\r\n                    className=\"flex justify-center items-center font-bold hover:bg-gray-200 text-xl h-10 w-10 rounded-md\">\r\n                    i\r\n                </button>\r\n                <button\r\n                    onClick={() => handleFontLink('createLink')}\r\n                    className=\"flex justify-center items-center font-bold hover:bg-gray-200 text-xl h-10 w-10 rounded-md\"\r\n                >\r\n                    <BiLink />\r\n                </button>\r\n                <button\r\n                    onClick={() => handleFontUnLink('unlink')}\r\n                    className=\"flex justify-center items-center font-bold hover:bg-gray-200 text-xl h-10 w-10 rounded-md\"\r\n                >\r\n                    <BiUnlink />\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { useEffect, useRef, useState } from 'react';\r\nimport { BiLink, BiUnlink } from 'react-icons/bi';\r\n// import { useGlobalState } from '../../Hooks/useGlobalState';\r\n\r\n// const limits = {\r\n//     KeyPartnerships: 728,\r\n//     KeyActivities: 364,\r\n//     ValuePropositions: 728,\r\n//     CustomerRelationships: 364,\r\n//     CustomerSegments: 728,\r\n//     Channels: 364,\r\n//     KeyResources: 364,\r\n//     RevenueStreams: 420,\r\n//     CostStructure: 420,\r\n//     BrainstormingNotes: 728\r\n// }\r\n\r\nexport default function EditInput({ handleEdit, index, setNewInpValue, valueToEdit, objName }) {\r\n    const containerRef = useRef(null)\r\n    const [inpValue, setInpValue] = useState('')\r\n    // const { form } = useGlobalState()\r\n\r\n    const handleInput = (e) => {\r\n        const allowedTags = [\"i\", \"b\", \"a\"];\r\n        const parser = new DOMParser();\r\n        const doc = parser.parseFromString(e.target.innerHTML, \"text/html\");\r\n        let validatedContent = \"\";\r\n\r\n        for (let node of doc.body.childNodes) {\r\n            if (node.nodeType === Node.TEXT_NODE) {\r\n                validatedContent += node.textContent;\r\n            } else if (allowedTags.includes(node.tagName.toLowerCase())) {\r\n                const attrs = Array.from(node.attributes)\r\n                    .map((attr) => `${attr.name}=\"${attr.value}\"`)\r\n                    .join(\" \");\r\n                validatedContent += `<${node.tagName.toLowerCase()} ${attrs}>${node.textContent}</${node.tagName.toLowerCase()}>`;\r\n            }\r\n        }\r\n        if (e.target.innerHTML.startsWith('&nbsp;')) {\r\n            setInpValue('');\r\n        } else {\r\n            setInpValue(validatedContent);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        const handleEnter = (e) => {\r\n            if (e.keyCode === 13) {\r\n                if (inpValue === '') {\r\n                    handleEdit(index, valueToEdit)\r\n                    setNewInpValue(false)\r\n                } else {\r\n                    handleEdit(index, inpValue)\r\n                    setNewInpValue(false)\r\n                }\r\n            }\r\n        };\r\n        window.addEventListener('keydown', handleEnter);\r\n\r\n        const handleEsc = (e) => {\r\n            if (e.keyCode === 27) {\r\n                setNewInpValue(false)\r\n            }\r\n        };\r\n        window.addEventListener('keydown', handleEsc);\r\n\r\n        function handleClickOutside(e) {\r\n            if (containerRef.current && !containerRef.current.contains(e.target)) {\r\n                if (inpValue === '') {\r\n                    // setInpActive(false)\r\n                    handleEdit(index, valueToEdit)\r\n                    setNewInpValue(false)\r\n                } else {\r\n                    // setInpActive(false)\r\n                    handleEdit(index, inpValue)\r\n                    setNewInpValue(false)\r\n                }\r\n            }\r\n        }\r\n        document.addEventListener('mousedown', handleClickOutside);\r\n\r\n        return () => {\r\n            window.removeEventListener('keydown', handleEsc);\r\n            window.removeEventListener('keydown', handleEnter);\r\n            document.removeEventListener('mousedown', handleClickOutside);\r\n        };\r\n    }, [containerRef, inpValue, handleEdit, index, setNewInpValue, valueToEdit]);\r\n\r\n    const handleFontStyle = (fontStyle) => {\r\n        document.execCommand(fontStyle, false, null);\r\n    };\r\n\r\n    const handleFontLink = (fontLink) => {\r\n        const links = prompt(\"Inset Link\")\r\n        document.execCommand(fontLink, false, links);\r\n    };\r\n\r\n    const handleFontUnLink = (fontUnLink) => {\r\n        document.execCommand(fontUnLink, false, '');\r\n    };\r\n    return (\r\n        <div ref={containerRef}>\r\n            <div className='flex'>\r\n                <div\r\n                    role='textbox'\r\n                    title='Type a message'\r\n                    data-placeholder=\"Type here...\"\r\n                    contentEditable={true}\r\n                    // onClick={() => setInpActive(true)}\r\n                    onInput={handleInput}\r\n                    className={`input_text_editor px-5 py-1 focus:border-none bg-gray-100 break-all w-full active:border-none outline-none`}\r\n                    dangerouslySetInnerHTML={{ __html: valueToEdit }}\r\n                />\r\n            </div>\r\n            <div className='flex justify-center items-center border border-gray-500 rounded-md max-w-[150px] m-2 bg-white'>\r\n                <button\r\n                    onClick={() => handleFontStyle('bold')}\r\n                    className=\"flex justify-center items-center font-bold hover:bg-gray-200 text-xl h-10 w-10 rounded-md\">\r\n                    B\r\n                </button>\r\n                <button\r\n                    onClick={() => handleFontStyle('italic')}\r\n                    className=\"flex justify-center items-center font-bold hover:bg-gray-200 text-xl h-10 w-10 rounded-md\">\r\n                    i\r\n                </button>\r\n                <button\r\n                    onClick={() => handleFontLink('createLink')}\r\n                    className=\"flex justify-center items-center font-bold hover:bg-gray-200 text-xl h-10 w-10 rounded-md\"\r\n                >\r\n                    <BiLink />\r\n                </button>\r\n                <button\r\n                    onClick={() => handleFontUnLink('unlink')}\r\n                    className=\"flex justify-center items-center font-bold hover:bg-gray-200 text-xl h-10 w-10 rounded-md\"\r\n                >\r\n                    <BiUnlink />\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { useState } from 'react'\r\nimport { RxDragHandleDots2 } from 'react-icons/rx'\r\nimport { RiDeleteBinLine, RiEditBoxLine } from 'react-icons/ri'\r\nimport EditInput from './EditInput'\r\nimport { useGlobalState } from '../../Hooks/useGlobalState'\r\n\r\n\r\nexport default function List({ value, handleEdit, index, objName }) {\r\n    const [newInpValue, setNewInpValue] = useState(false);\r\n    const [showMenu, setShowMenu] = useState(false);\r\n    const { dispatch, form } = useGlobalState();\r\n\r\n    const handleDelete = (value) => {\r\n        const updatedList = form[objName].list.filter((partner) => partner !== value);\r\n        dispatch({\r\n            type: \"UPDATEFORM\", payload: { ...form, [objName]: { list: updatedList } }\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div\r\n            onDoubleClick={() => setNewInpValue(true)}>\r\n            {\r\n                newInpValue && <EditInput handleEdit={handleEdit} index={index} setNewInpValue={setNewInpValue} valueToEdit={value} objName={objName} />\r\n            }\r\n            {\r\n                !newInpValue && (\r\n                    <div className='flex items-center gap-3 justify-center px-2 cursor-pointer hover:bg-white'>\r\n                        <div\r\n                            className='hover:bg-slate-200 text-lg group relative'\r\n                            onClick={() => setShowMenu(!showMenu)}\r\n                        >\r\n                            <RxDragHandleDots2 />\r\n                            {\r\n                                showMenu && (\r\n                                    <div className={`absolute bg-white p-2 border shadow-2xl z-10 border-gray-300`}>\r\n                                        <ul>\r\n                                            <li\r\n                                                onClick={() => setNewInpValue(true)}\r\n                                                className='flex items-center gap-3 hover:bg-gray-200 hover:text-primary p-1 w-28 text-sm'>\r\n                                                <RiEditBoxLine />\r\n                                                Edit\r\n                                            </li>\r\n                                            <li\r\n                                                onClick={() => handleDelete(value)}\r\n                                                className='flex items-center gap-3 hover:bg-gray-200 hover:text-primary p-1 w-28 text-sm'>\r\n                                                <RiDeleteBinLine />\r\n                                                Delete\r\n                                            </li>\r\n                                        </ul>\r\n                                    </div>\r\n                                )\r\n                            }\r\n                        </div>\r\n                        <div\r\n                            className='w-full break-all text-area'\r\n                            dangerouslySetInnerHTML={{ __html: value }}\r\n                        />\r\n                    </div>\r\n                )}\r\n        </div>\r\n    )\r\n}\r\n","import React, { useRef, useState } from 'react';\r\nimport { BsExclamationLg } from 'react-icons/bs';\r\nimport TextInputField from './TextInputField';\r\nimport List from './List';\r\nimport { useGlobalState } from '../../Hooks/useGlobalState';\r\n\r\nconst limits = {\r\n    KeyPartnerships: 728,\r\n    KeyActivities: 364,\r\n    ValuePropositions: 728,\r\n    CustomerRelationships: 364,\r\n    CustomerSegments: 728,\r\n    Channels: 364,\r\n    KeyResources: 364,\r\n    RevenueStreams: 420,\r\n    CostStructure: 420,\r\n    BrainstormingNotes: 728\r\n}\r\n\r\nexport default function EditableDiv({ list, title, objName }) {\r\n    const [inpActive, setInpActive] = useState(false);\r\n    const { dispatch, form } = useGlobalState();\r\n\r\n    //save reference for dragItem and dragOverItem\r\n    const dragItem = useRef(null)\r\n    const dragOverItem = useRef(null)\r\n\r\n    //const handle drag sorting\r\n    const handleSort = () => {\r\n        //duplicate items\r\n        let _text = [...form[objName].list]\r\n\r\n        //remove and save the dragged item content\r\n        const draggedItemContent = _text.splice(dragItem.current, 1)[0]\r\n\r\n        //switch the position\r\n        _text.splice(dragOverItem.current, 0, draggedItemContent)\r\n\r\n        //reset the position ref\r\n        dragItem.current = null\r\n        dragOverItem.current = null\r\n\r\n        //update the actual array\r\n        // setText(_text)\r\n        dispatch({ type: \"UPDATEFORM\", payload: { ...form, [objName]: { list: _text } } })\r\n    }\r\n\r\n    const handleEdit = (index, newValue) => {\r\n        const newItems = [...form[objName].list];\r\n        newItems[index] = newValue;\r\n        dispatch({ type: \"UPDATEFORM\", payload: { ...form, [objName]: { list: newItems } } })\r\n    }\r\n\r\n    const handleTopPercentage = (objeName) => {\r\n        const maxLen = limits[objeName] / 28\r\n        const percentage = Math.floor(form[objeName].list.length / maxLen * 100)\r\n        return percentage\r\n    }\r\n    return (\r\n        <>\r\n            <div className='flex flex-col' >\r\n                <div className='flex items-center px-3 py-3'>\r\n                    <h2 className='text-lg font-medium'>{title}</h2>\r\n                    {\r\n                        (form[objName].list.length === 0) && (\r\n                            <>\r\n                                {\r\n                                    !inpActive && (\r\n                                        <button\r\n                                            onClick={() => setInpActive(true)}\r\n                                            className='py-3 text-primary font-semibold flex items-center text-lg hover:text-opacity-60 cursor-pointer ml-auto'>\r\n                                            <h3 className='flex items-center gap-1 justify-center'>\r\n                                                <span>+</span>\r\n                                                Add\r\n                                            </h3>\r\n                                        </button>\r\n                                    )\r\n                                }\r\n                            </>\r\n                        )\r\n                    }\r\n                    {\r\n                        (form[objName].list.length > 0 || inpActive) ? (\r\n                            <div\r\n                                title={list}\r\n                                className=\"bg-secondary h-7 w-7 rounded-full text-lg cursor-pointer ml-auto flex justify-center items-center text-white\">\r\n                                <BsExclamationLg className='text-lg' />\r\n                            </div>\r\n                        ) : null\r\n                    }\r\n                </div>\r\n                <div className='px-4'>\r\n                    {\r\n                        (form[objName].list !== \"\" || form[objName].list !== null) && (\r\n                            form[objName].list?.map((value, index) => {\r\n                                value = value.replace(/\\n/g, \"\");\r\n                                return (\r\n                                    <div\r\n                                        draggable\r\n                                        onDragStart={(e) => (dragItem.current = index)}\r\n                                        onDragEnter={(e) => (dragOverItem.current = index)}\r\n                                        onDragEnd={handleSort}\r\n                                        onDragOver={(e) => e.preventDefault()}\r\n                                        key={index}\r\n                                    >\r\n                                        <List\r\n                                            value={value}\r\n                                            handleEdit={handleEdit}\r\n                                            index={index}\r\n                                            objName={objName}\r\n                                        />\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        )\r\n                    }\r\n                </div>\r\n                <div>\r\n                    {\r\n                        (!inpActive) && (\r\n                            (form[objName].list.length === 0) ? (\r\n                                <p className='px-4 text-base text-secondary'>\r\n                                    {\r\n                                        list?.map((list, index) => (\r\n                                            <React.Fragment key={index}>\r\n                                                {list}\r\n                                                < br />\r\n                                            </React.Fragment>\r\n                                        ))\r\n                                    }\r\n                                </p>\r\n                            ) : <div\r\n                                onClick={() => setInpActive(true)}\r\n                                className={`${handleTopPercentage(objName) === 100 ? \"hidden\" : \"block\"} px-5 py-3 text-primary font-semibold flex items-center text-lg hover:text-opacity-60 cursor-pointer`}>\r\n                                <h3>\r\n                                    <span>+</span>\r\n                                    Add More\r\n                                </h3>\r\n                            </div>\r\n                        )\r\n                    }\r\n                </div>\r\n            </div>\r\n            {\r\n                inpActive && <TextInputField\r\n                    setInpActive={setInpActive}\r\n                    objName={objName}\r\n                />\r\n            }\r\n        </>\r\n    );\r\n}\r\n","import React, { useRef, useState } from 'react'\r\nimport { useGlobalState } from '../../Hooks/useGlobalState';\r\nimport List from './List';\r\nimport TextInputField from './TextInputField';\r\n\r\nexport default function BrainstormingSec({ objName }) {\r\n    const [input, setInput] = useState(false)\r\n    const { dispatch, form } = useGlobalState();\r\n\r\n    //save reference for dragItem and dragOverItem\r\n    const dragItem = useRef(null)\r\n    const dragOverItem = useRef(null)\r\n\r\n    //const handle drag sorting\r\n    const handleSort = () => {\r\n        //duplicate items\r\n        let _text = [...form[objName].list]\r\n\r\n        //remove and save the dragged item content\r\n        const draggedItemContent = _text.splice(dragItem.current, 1)[0]\r\n\r\n        //switch the position\r\n        _text.splice(dragOverItem.current, 0, draggedItemContent)\r\n\r\n        //reset the position ref\r\n        dragItem.current = null\r\n        dragOverItem.current = null\r\n\r\n        //update the actual array\r\n        // setText(_text)\r\n        dispatch({ type: \"UPDATEFORM\", payload: { ...form, [objName]: { list: _text } } })\r\n    }\r\n\r\n    const handleEdit = (index, newValue) => {\r\n        const newItems = [...form[objName].list];\r\n        newItems[index] = newValue;\r\n        dispatch({ type: \"UPDATEFORM\", payload: { ...form, [objName]: { list: newItems } } })\r\n    }\r\n    return (\r\n        <div className='border-2 border-gray-300 min-h-52 p-5'>\r\n            <div className='hover:text-opacity-60'>\r\n                {\r\n                    (form[objName].list.length === 0) && (\r\n                        !input && (\r\n                            <h1\r\n                                className='text-2xl text-primary font-medium cursor-pointer'\r\n                                onClick={() => setInput(!input)}\r\n                            >\r\n                                <span>+</span>\r\n                                Add Business Notes Here\r\n                            </h1>\r\n                        )\r\n                    )\r\n                }\r\n                {\r\n                    (form[objName].list !== \"\" || form[objName].list !== null) && (\r\n                        form[objName].list?.map((value, index) => (\r\n                            <div\r\n                                draggable\r\n                                onDragStart={(e) => (dragItem.current = index)}\r\n                                onDragEnter={(e) => (dragOverItem.current = index)}\r\n                                onDragEnd={handleSort}\r\n                                onDragOver={(e) => e.preventDefault()}\r\n                                key={index}\r\n                            >\r\n                                <List\r\n                                    value={value}\r\n                                    handleEdit={handleEdit}\r\n                                    index={index}\r\n                                    objName={objName}\r\n                                />\r\n                            </div>\r\n                        ))\r\n                    )\r\n                }\r\n                {\r\n                    (!input) && (\r\n                        (form[objName].list.length === 0) ? null : <div\r\n                            onClick={() => setInput(true)}\r\n                            className='px-5 py-3 text-primary font-semibold flex items-center text-lg hover:text-opacity-60 cursor-pointer'>\r\n                            <h3>\r\n                                <span>+</span>\r\n                                Add More\r\n                            </h3>\r\n                        </div>\r\n                    )\r\n                }\r\n                {\r\n                    input && (\r\n                        <TextInputField\r\n                            setInpActive={setInput}\r\n                            objName={objName}\r\n                        />\r\n                    )\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { Document, Page, Text, View, StyleSheet, Font, Link } from '@react-pdf/renderer';\r\nimport RobotoRegular from '../../Utils/fonts/Roboto-Regular.ttf'\r\nimport RobotoBold from '../../Utils/fonts/Roboto-Bold.ttf'\r\nimport RobotoItalic from '../../Utils/fonts/Roboto-Italic.ttf'\r\nimport RobotoBoldItalic from '../../Utils/fonts/Roboto-BoldItalic.ttf'\r\n\r\nFont.register({\r\n    family: \"Roboto\",\r\n    format: \"truetype\",\r\n    fonts: [\r\n        // { src: RobotoBlack }, // normal\r\n        { src: RobotoBold },\r\n        { src: RobotoItalic }, // bold\r\n        { src: RobotoBoldItalic } // bold\r\n    ]\r\n})\r\n\r\n// Create styles\r\nconst styles = StyleSheet.create({\r\n    page: {\r\n        flexDirection: 'row',\r\n        backgroundColor: '#fff',\r\n        // fontFamily: \"Roboto\"\r\n    },\r\n    invoiceDateContainer: {\r\n        flexDirection: 'row',\r\n        justifyContent: 'flex-end',\r\n        margin: 20\r\n    },\r\n    label: {\r\n        fontSize: 48,\r\n        // fontFamily: \"Roboto\"\r\n    },\r\n    tableContainer: {\r\n        flexDirection: \"row\",\r\n        flexWrap: 'wrap',\r\n        marginTop: 80,\r\n        marginBottom: 20,\r\n        marginLeft: -525,\r\n        borderWidth: 1,\r\n        borderColor: '#333',\r\n        width: 1150\r\n    },\r\n    firstRow: {\r\n        // flexDirection: 'row',\r\n        borderWidth: 1,\r\n        borderColor: '#333',\r\n        width: 230,\r\n        height: 500,\r\n        borderLeft: \"none\",\r\n        borderTop: \"none\",\r\n        // whiteSpace: \"pre-wrap\"\r\n    },\r\n    firstRowInner: {\r\n        flexDirection: 'row',\r\n        flexWrap: 'wrap',\r\n        borderWidth: 1,\r\n        borderColor: '#333',\r\n        width: 230,\r\n        height: 250,\r\n        borderLeft: \"none\",\r\n        borderTop: \"none\",\r\n        borderRight: \"none\"\r\n    },\r\n    firstRowLastCol: {\r\n        flexDirection: 'column',\r\n        flexWrap: 'wrap',\r\n        borderWidth: 1,\r\n        borderColor: '#333',\r\n        width: 228,\r\n        borderLeft: \"none\",\r\n        borderTop: \"none\",\r\n        borderRight: \"none\"\r\n    },\r\n    secRow: {\r\n        flexDirection: 'column',\r\n        flexWrap: 'wrap',\r\n        borderWidth: 1,\r\n        borderColor: '#333',\r\n        width: 574,\r\n        height: 240,\r\n        borderLeft: \"none\",\r\n        borderTop: \"none\",\r\n        borderBottom: \"none\"\r\n    },\r\n    borderRightNone: {\r\n        border: \"none\"\r\n    },\r\n    title: {\r\n        fontSize: 16,\r\n        marginHorizontal: 5,\r\n        marginVertical: 3,\r\n        fontFamily: \"Roboto\",\r\n        fontWeight: \"normal\",\r\n        // width: 230,\r\n        // overflow: \"hidden\"\r\n    }\r\n});\r\n\r\nexport default function BMCPdf({ form }) {\r\n\r\n    const handleTag = (list) => {\r\n        let ele = { bold: \"\", italic: \"\", link: \"\", src: null, text: \"\" }\r\n        let parser = new DOMParser();\r\n        let htmlDoc = parser.parseFromString(list, 'text/html')\r\n        let bold = htmlDoc.getElementsByTagName('b');\r\n        let italic = htmlDoc.getElementsByTagName('i');\r\n        let link = htmlDoc.getElementsByTagName('a');\r\n        for (let i = 0; i < link.length; i++) {\r\n            const element = link[i];\r\n            ele.link = true\r\n            ele.src = element.getAttribute('href')\r\n            ele.text = element.textContent\r\n        }\r\n\r\n        for (let i = 0; i < bold.length; i++) {\r\n            const element = bold[i];\r\n            ele.bold = true\r\n            ele.text = element.textContent\r\n        }\r\n\r\n        for (let i = 0; i < italic.length; i++) {\r\n            const element = italic[i];\r\n            ele.italic = true\r\n            ele.text = element.textContent\r\n        }\r\n        if ((bold.length < 1) && (italic.length < 1) && (link.length < 1)) {\r\n            ele.text += list;\r\n        }\r\n        return ele\r\n    }\r\n\r\n    const blankRows = Array(form)\r\n    const data = blankRows.map((list, index) => (\r\n        <View style={styles.tableContainer} key={index}>\r\n            <View style={styles.firstRow}>\r\n                <Text style={styles.title}>Key Partnerships</Text>\r\n                {\r\n                    list.KeyPartnerships.list.map((list, index) => {\r\n                        const ele = handleTag(list)\r\n                        Font.register({\r\n                            family: \"Roboto-Regular\",\r\n                            format: \"truetype\",\r\n                            src: RobotoRegular\r\n                        })\r\n                        Font.register({\r\n                            family: \"Roboto-Bold\",\r\n                            format: \"truetype\",\r\n                            src: RobotoBold\r\n                        })\r\n                        Font.register({\r\n                            family: \"Roboto-Italic\",\r\n                            format: \"truetype\",\r\n                            src: RobotoItalic\r\n                        })\r\n                        Font.register({\r\n                            family: \"Roboto-Bold-Italic\",\r\n                            format: \"truetype\",\r\n                            src: RobotoBoldItalic\r\n                        })\r\n                        const classStyle = StyleSheet.create({\r\n                            list: {\r\n                                flexDirection: \"row\",\r\n                                fontSize: 12,\r\n                                marginHorizontal: 10,\r\n                                width: 230,\r\n                                fontFamily: (ele.bold) ? \"Roboto-Bold\" : (ele.italic) ? \"Roboto-Italic\" : \"Roboto-Regular\"\r\n                            }\r\n                        })\r\n                        return (ele.link) ?\r\n                            <Link\r\n                                src={ele.src}\r\n                                style={classStyle.list} key={index} >\r\n                                {ele.text}\r\n                            </Link>\r\n                            :\r\n                            <Text\r\n                                style={classStyle.list} key={index} >{ele.text}</Text>\r\n                    })\r\n                }\r\n            </View>\r\n            <View style={styles.firstRow}>\r\n                <View style={styles.firstRowInner}>\r\n                    <Text style={styles.title}>Key Activities</Text>\r\n                    {\r\n                        list.KeyActivities.list.map((list, index) => {\r\n                            const ele = handleTag(list)\r\n                            Font.register({\r\n                                family: \"Roboto-Regular\",\r\n                                format: \"truetype\",\r\n                                src: RobotoRegular\r\n                            })\r\n                            Font.register({\r\n                                family: \"Roboto-Bold\",\r\n                                format: \"truetype\",\r\n                                src: RobotoBold\r\n                            })\r\n                            Font.register({\r\n                                family: \"Roboto-Italic\",\r\n                                format: \"truetype\",\r\n                                src: RobotoItalic\r\n                            })\r\n                            Font.register({\r\n                                family: \"Roboto-Bold-Italic\",\r\n                                format: \"truetype\",\r\n                                src: RobotoBoldItalic\r\n                            })\r\n                            const classStyle = StyleSheet.create({\r\n                                list: {\r\n                                    fontSize: 12,\r\n                                    marginHorizontal: 10,\r\n                                    width: 230,\r\n                                    fontFamily: (ele.bold) ? \"Roboto-Bold\" : (ele.italic) ? \"Roboto-Italic\" : \"Roboto-Regular\"\r\n                                }\r\n                            })\r\n                            return (ele.link) ?\r\n                                <Link\r\n                                    src={ele.src}\r\n                                    style={classStyle.list} key={index} >\r\n                                    {ele.text}\r\n                                </Link>\r\n                                :\r\n                                <Text\r\n                                    style={classStyle.list} key={index} >{ele.text}</Text>\r\n                        })\r\n                    }\r\n                </View>\r\n                <View style={styles.firstRowInner}>\r\n                    <Text style={styles.title}>Key Resources</Text>\r\n                    {\r\n                        list.KeyResources.list.map((list, index) => {\r\n                            const ele = handleTag(list)\r\n                            Font.register({\r\n                                family: \"Roboto-Regular\",\r\n                                format: \"truetype\",\r\n                                src: RobotoRegular\r\n                            })\r\n                            Font.register({\r\n                                family: \"Roboto-Bold\",\r\n                                format: \"truetype\",\r\n                                src: RobotoBold\r\n                            })\r\n                            Font.register({\r\n                                family: \"Roboto-Italic\",\r\n                                format: \"truetype\",\r\n                                src: RobotoItalic\r\n                            })\r\n                            Font.register({\r\n                                family: \"Roboto-Bold-Italic\",\r\n                                format: \"truetype\",\r\n                                src: RobotoBoldItalic\r\n                            })\r\n                            const classStyle = StyleSheet.create({\r\n                                list: {\r\n                                    fontSize: 12,\r\n                                    marginHorizontal: 10,\r\n                                    width: 230,\r\n                                    fontFamily: (ele.bold) ? \"Roboto-Bold\" : (ele.italic) ? \"Roboto-Italic\" : \"Roboto-Regular\"\r\n                                    // fontWeight: ele.bold ? \"normal\" ? (ele.italic) : \"bold\" : null\r\n                                }\r\n                            })\r\n                            return (ele.link) ?\r\n                                <Link\r\n                                    src={ele.src}\r\n                                    style={classStyle.list} key={index} >\r\n                                    {ele.text}\r\n                                </Link>\r\n                                :\r\n                                <Text\r\n                                    style={classStyle.list} key={index} >{ele.text}</Text>\r\n                        })\r\n                    }\r\n                </View>\r\n            </View>\r\n            <View style={styles.firstRow}>\r\n                <Text style={styles.title}> Value Propositions</Text>\r\n                {\r\n                    list.ValuePropositions.list.map((list, index) => {\r\n                        const ele = handleTag(list)\r\n                        Font.register({\r\n                            family: \"Roboto-Regular\",\r\n                            format: \"truetype\",\r\n                            src: RobotoRegular\r\n                        })\r\n                        Font.register({\r\n                            family: \"Roboto-Bold\",\r\n                            format: \"truetype\",\r\n                            src: RobotoBold\r\n                        })\r\n                        Font.register({\r\n                            family: \"Roboto-Italic\",\r\n                            format: \"truetype\",\r\n                            src: RobotoItalic\r\n                        })\r\n                        Font.register({\r\n                            family: \"Roboto-Bold-Italic\",\r\n                            format: \"truetype\",\r\n                            src: RobotoBoldItalic\r\n                        })\r\n                        const classStyle = StyleSheet.create({\r\n                            list: {\r\n                                fontSize: 12,\r\n                                marginHorizontal: 10,\r\n                                width: 230,\r\n                                fontFamily: (ele.bold) ? \"Roboto-Bold\" : (ele.italic) ? \"Roboto-Italic\" : \"Roboto-Regular\",\r\n                                // whiteSpace: \"pre-wrap\"\r\n                                // fontWeight: ele.bold ? \"normal\" ? (ele.italic) : \"bold\" : null\r\n                            }\r\n                        })\r\n                        return (ele.link) ?\r\n                            <Link\r\n                                src={ele.src}\r\n                                style={classStyle.list} key={index} >\r\n                                {ele.text}\r\n                            </Link>\r\n                            :\r\n                            <Text\r\n                                style={classStyle.list} key={index} >{ele.text}</Text>\r\n                    })\r\n                }\r\n            </View>\r\n            <View style={styles.firstRow}>\r\n                <View style={styles.firstRowInner}>\r\n                    <Text style={styles.title}> Customer Relationships</Text>\r\n                    {\r\n                        list.CustomerRelationships.list.map((list, index) => {\r\n                            const ele = handleTag(list)\r\n                            Font.register({\r\n                                family: \"Roboto-Regular\",\r\n                                format: \"truetype\",\r\n                                src: RobotoRegular\r\n                            })\r\n                            Font.register({\r\n                                family: \"Roboto-Bold\",\r\n                                format: \"truetype\",\r\n                                src: RobotoBold\r\n                            })\r\n                            Font.register({\r\n                                family: \"Roboto-Italic\",\r\n                                format: \"truetype\",\r\n                                src: RobotoItalic\r\n                            })\r\n                            Font.register({\r\n                                family: \"Roboto-Bold-Italic\",\r\n                                format: \"truetype\",\r\n                                src: RobotoBoldItalic\r\n                            })\r\n                            const classStyle = StyleSheet.create({\r\n                                list: {\r\n                                    fontSize: 12,\r\n                                    marginHorizontal: 10,\r\n                                    width: 230,\r\n                                    fontFamily: (ele.bold) ? \"Roboto-Bold\" : (ele.italic) ? \"Roboto-Italic\" : \"Roboto-Regular\"\r\n                                    // fontWeight: ele.bold ? \"normal\" ? (ele.italic) : \"bold\" : null\r\n                                }\r\n                            })\r\n                            return (ele.link) ?\r\n                                <Link\r\n                                    src={ele.src}\r\n                                    style={classStyle.list} key={index} >\r\n                                    {ele.text}\r\n                                </Link>\r\n                                :\r\n                                <Text\r\n                                    style={classStyle.list} key={index} >{ele.text}</Text>\r\n                        })\r\n                    }\r\n                </View>\r\n                <View style={styles.firstRowInner}>\r\n                    <Text style={styles.title}> Channels</Text>\r\n                    {\r\n                        list.Channels.list.map((list, index) => {\r\n                            const ele = handleTag(list)\r\n                            Font.register({\r\n                                family: \"Roboto-Regular\",\r\n                                format: \"truetype\",\r\n                                src: RobotoRegular\r\n                            })\r\n                            Font.register({\r\n                                family: \"Roboto-Bold\",\r\n                                format: \"truetype\",\r\n                                src: RobotoBold\r\n                            })\r\n                            Font.register({\r\n                                family: \"Roboto-Italic\",\r\n                                format: \"truetype\",\r\n                                src: RobotoItalic\r\n                            })\r\n                            Font.register({\r\n                                family: \"Roboto-Bold-Italic\",\r\n                                format: \"truetype\",\r\n                                src: RobotoBoldItalic\r\n                            })\r\n                            const classStyle = StyleSheet.create({\r\n                                list: {\r\n                                    fontSize: 12,\r\n                                    marginHorizontal: 10,\r\n                                    width: 230,\r\n                                    fontFamily: (ele.bold) ? \"Roboto-Bold\" : (ele.italic) ? \"Roboto-Italic\" : \"Roboto-Regular\"\r\n                                    // fontWeight: ele.bold ? \"normal\" ? (ele.italic) : \"bold\" : null\r\n                                }\r\n                            })\r\n                            return (ele.link) ?\r\n                                <Link\r\n                                    src={ele.src}\r\n                                    style={classStyle.list} key={index} >\r\n                                    {ele.text}\r\n                                </Link>\r\n                                :\r\n                                <Text\r\n                                    style={classStyle.list} key={index} >{ele.text}</Text>\r\n                        })\r\n                    }\r\n                </View>\r\n            </View>\r\n            <View style={styles.firstRowLastCol}>\r\n                <Text style={styles.title}>Customer Segments</Text>\r\n                {\r\n                    list.CustomerSegments.list.map((list, index) => {\r\n                        const ele = handleTag(list)\r\n                        Font.register({\r\n                            family: \"Roboto-Regular\",\r\n                            format: \"truetype\",\r\n                            src: RobotoRegular\r\n                        })\r\n                        Font.register({\r\n                            family: \"Roboto-Bold\",\r\n                            format: \"truetype\",\r\n                            src: RobotoBold\r\n                        })\r\n                        Font.register({\r\n                            family: \"Roboto-Italic\",\r\n                            format: \"truetype\",\r\n                            src: RobotoItalic\r\n                        })\r\n                        Font.register({\r\n                            family: \"Roboto-Bold-Italic\",\r\n                            format: \"truetype\",\r\n                            src: RobotoBoldItalic\r\n                        })\r\n                        const classStyle = StyleSheet.create({\r\n                            list: {\r\n                                fontSize: 12,\r\n                                marginHorizontal: 10,\r\n                                width: 230,\r\n                                fontFamily: (ele.bold) ? \"Roboto-Bold\" : (ele.italic) ? \"Roboto-Italic\" : \"Roboto-Regular\"\r\n                                // fontWeight: ele.bold ? \"normal\" ? (ele.italic) : \"bold\" : null\r\n                            }\r\n                        })\r\n                        return (ele.link) ?\r\n                            <Link\r\n                                src={ele.src}\r\n                                style={classStyle.list} key={index} >\r\n                                {ele.text}\r\n                            </Link>\r\n                            :\r\n                            <Text\r\n                                style={classStyle.list} key={index} >{ele.text}</Text>\r\n                    })\r\n                }\r\n            </View>\r\n            <View style={styles.secRow}>\r\n                <Text style={styles.title}>Cost Structure</Text>\r\n                {\r\n                    list.CostStructure.list.map((list, index) => {\r\n                        const ele = handleTag(list)\r\n                        Font.register({\r\n                            family: \"Roboto-Regular\",\r\n                            format: \"truetype\",\r\n                            src: RobotoRegular\r\n                        })\r\n                        Font.register({\r\n                            family: \"Roboto-Bold\",\r\n                            format: \"truetype\",\r\n                            src: RobotoBold\r\n                        })\r\n                        Font.register({\r\n                            family: \"Roboto-Italic\",\r\n                            format: \"truetype\",\r\n                            src: RobotoItalic\r\n                        })\r\n                        Font.register({\r\n                            family: \"Roboto-Bold-Italic\",\r\n                            format: \"truetype\",\r\n                            src: RobotoBoldItalic\r\n                        })\r\n                        const classStyle = StyleSheet.create({\r\n                            list: {\r\n                                fontSize: 12,\r\n                                marginHorizontal: 10,\r\n                                width: 230,\r\n                                fontFamily: (ele.bold) ? \"Roboto-Bold\" : (ele.italic) ? \"Roboto-Italic\" : \"Roboto-Regular\"\r\n                                // fontWeight: ele.bold ? \"normal\" ? (ele.italic) : \"bold\" : null\r\n                            }\r\n                        })\r\n                        return (ele.link) ?\r\n                            <Link\r\n                                src={ele.src}\r\n                                style={classStyle.list} key={index} >\r\n                                {ele.text}\r\n                            </Link>\r\n                            :\r\n                            <Text\r\n                                style={classStyle.list} key={index} >{ele.text}</Text>\r\n                    })\r\n                }\r\n            </View>\r\n            <View style={styles.borderRightNone}>\r\n                <Text style={styles.title}>Revenue Streams</Text>\r\n                {\r\n                    list.RevenueStreams.list.map((list, index) => {\r\n                        const ele = handleTag(list)\r\n                        Font.register({\r\n                            family: \"Roboto-Regular\",\r\n                            format: \"truetype\",\r\n                            src: RobotoRegular\r\n                        })\r\n                        Font.register({\r\n                            family: \"Roboto-Bold\",\r\n                            format: \"truetype\",\r\n                            src: RobotoBold\r\n                        })\r\n                        Font.register({\r\n                            family: \"Roboto-Italic\",\r\n                            format: \"truetype\",\r\n                            src: RobotoItalic\r\n                        })\r\n                        Font.register({\r\n                            family: \"Roboto-Bold-Italic\",\r\n                            format: \"truetype\",\r\n                            src: RobotoBoldItalic\r\n                        })\r\n                        const classStyle = StyleSheet.create({\r\n                            list: {\r\n                                fontSize: 12,\r\n                                marginHorizontal: 10,\r\n                                width: 230,\r\n                                fontFamily: (ele.bold) ? \"Roboto-Bold\" : (ele.italic) ? \"Roboto-Italic\" : \"Roboto-Regular\"\r\n                                // fontWeight: ele.bold ? \"normal\" ? (ele.italic) : \"bold\" : null\r\n                            }\r\n                        })\r\n                        return (ele.link) ?\r\n                            <Link\r\n                                src={ele.src}\r\n                                style={classStyle.list} key={index} >\r\n                                {ele.text}\r\n                            </Link>\r\n                            :\r\n                            <Text\r\n                                style={classStyle.list} key={index} >{ele.text}</Text>\r\n                    })\r\n                }\r\n            </View>\r\n        </View>\r\n    ))\r\n    return (\r\n        <Document title='PDF_CHECK'>\r\n            <Page size=\"A3\" orientation='landscape' style={styles.page}>\r\n                <View style={styles.invoiceDateContainer}>\r\n                    <Text style={styles.label}>Business Model Canvas</Text>\r\n                </View >\r\n                {data}\r\n            </Page>\r\n        </Document>\r\n    )\r\n}\r\n","import { useGlobalState } from \"../../Hooks/useGlobalState\";\r\n\r\nconst limits = {\r\n    KeyPartnerships: 728,\r\n    KeyActivities: 364,\r\n    ValuePropositions: 728,\r\n    CustomerRelationships: 364,\r\n    CustomerSegments: 728,\r\n    Channels: 364,\r\n    KeyResources: 364,\r\n    RevenueStreams: 420,\r\n    CostStructure: 420,\r\n    BrainstormingNotes: 728\r\n}\r\n\r\nexport default function Percentage({ objName }) {\r\n    const { form } = useGlobalState();\r\n\r\n    const handleTopPercentage = (objeName) => {\r\n        const maxLen = limits[objeName] / 28\r\n        const percentage = Math.floor(form[objeName].list.length / maxLen * 100)\r\n        return percentage\r\n    }\r\n    return form[objName].list.length > 0 && (\r\n        <div className='relative w-full bg-secondary h-1 flex mb-2'>\r\n            <div className='absolute bg-primary h-1' style={{ width: `${(handleTopPercentage(objName) > 100 ? \"100%\" : handleTopPercentage(objName))}%` }}></div>\r\n            {\r\n                handleTopPercentage(objName) >= 100 ? null : <span className='ml-auto m-2 text-xs'>{100 - handleTopPercentage(objName)}% Left</span>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import axios from 'axios';\r\nimport Text from '../Utils/Text';\r\nimport { BiDownload } from \"react-icons/bi\";\r\nimport React, { Suspense, useEffect, useState } from 'react';\r\nimport { useGlobalState } from \"../Hooks/useGlobalState\";\r\nimport EditableDiv from '../components/BMCModule/EditableDiv';\r\nimport BrainstormingSec from '../components/BMCModule/BrainstormingSec';\r\nimport { PDFDownloadLink } from '@react-pdf/renderer';\r\nimport BMCPdf from '../components/PDFReports.jsx/BMCPdf';\r\nimport Percentage from '../components/BMCModule/Percentage';\r\n\r\nexport default function BMCModule() {\r\n    const { form, dispatch } = useGlobalState();\r\n    const [page, setPage] = useState(1);\r\n    const [length, setLength] = useState(null);\r\n    const [id, setId] = useState(null);\r\n\r\n    const handlePostForm = async () => {\r\n        if (id) {\r\n            await axios.put(\"http://localhost:8080/editData/\", { form, id })\r\n        } else {\r\n            await axios.post(\"http://localhost:8080/addData/\", form)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const { data: { formData, length } } = await axios.get(`http://localhost:8080/getData?page=${page}`)\r\n                setLength(length);\r\n                if (formData.length > 0) {\r\n                    dispatch({ type: \"UPDATEFORMDB\", payload: formData[0] })\r\n                    setId(formData[0]._id)\r\n                }\r\n            } catch (err) {\r\n                console.log(err);\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [page, dispatch])\r\n\r\n    const handleCreateNewForm = () => {\r\n        setId(null)\r\n        dispatch({ type: \"RESET_STATE\" })\r\n    }\r\n\r\n    const handleNextPage = () => {\r\n        (page >= length) ? setPage(1) : setPage(page + 1);\r\n    };\r\n\r\n    const handlePreviousPage = () => {\r\n        (page <= 1) ? setPage(length) && setPage(page - 1) : setPage(page - 1);\r\n    };\r\n\r\n    // const handleGetData = async () => {\r\n    //     // const { data } = await axios.get(`http://localhost:8080/getData`)\r\n    //     // dispatch({ type: \"UPDATEFORMDB\", payload: data })\r\n    //     console.log(form);\r\n    // }\r\n\r\n    return (\r\n        <div className='px-24 py-10'>\r\n            <div className='flex my-5'>\r\n                <div className='flex gap-5'>\r\n                    <h3\r\n                        className={`${!id && \"border-b-2 border-primary\"} text-xl text-secondary hover:text-primary font-medium cursor-pointer hover:border-b-2 hover:border-primary`}\r\n                        onClick={handleCreateNewForm}>\r\n                        Create BMC\r\n                    </h3>\r\n                    <h3\r\n                        className='text-xl text-secondary hover:text-primary font-medium cursor-pointer hover:border-b-2 hover:border-primary'\r\n                        onClick={handlePreviousPage}>\r\n                        View Previous\r\n                    </h3>\r\n                    <h3\r\n                        className='text-xl text-secondary hover:text-primary font-medium cursor-pointer hover:border-b-2 hover:border-primary'\r\n                        onClick={handleNextPage}>\r\n                        View Next\r\n                    </h3>\r\n                </div>\r\n                <div className='flex ml-auto gap-3'>\r\n                    <PDFDownloadLink document={\r\n                        <Suspense fallback={<LoadingBtn />}>\r\n                            <BMCPdf form={form} />\r\n                        </Suspense>\r\n                    } fileName={id} className=\"bg-primary text-white p-2 font-medium flex gap-3 justify-center items-center hover:bg-opacity-80 px-3 rounded-lg\">\r\n                        <BiDownload className=\"text-xl\" />\r\n                        Download\r\n                    </PDFDownloadLink>\r\n                    <button\r\n                        onClick={handlePostForm}\r\n                        className=\"bg-primary text-white p-2 font-medium flex gap-3 justify-center items-center hover:bg-opacity-80 px-3 rounded-lg\">\r\n                        Save Template\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            <div className='grid grid-cols-1 lg:grid-cols-5 grid-rows-4 border-2 border-gray-300'>\r\n                {/* KeyPartnerships - box */}\r\n                <div className=' flex flex-col lg:row-span-2 lg:col-span-1 2xl:border-r-2 xl:border-r-2 lg:border-r-2  border-r-0 border-b-2 border-gray-300 gap-2 w-full hover:bg-gray-100'>\r\n                    <Percentage objName={'KeyPartnerships'} />\r\n                    <EditableDiv list={Text.firstBox.questions} title={Text.firstBox.title} objName={'KeyPartnerships'} />\r\n                </div>\r\n                {/* KeyActivities - box */}\r\n                <div className='flex flex-col lg:border-r-2 lg:border-b-2 border-b-2 lg:border-gray-300 w-full hover:bg-gray-100'>\r\n                    <Percentage objName={'KeyActivities'} />\r\n                    <EditableDiv list={Text.secondBox.questions} title={Text.secondBox.title} objName={'KeyActivities'} />\r\n                </div>\r\n                {/* ValuePropositions - box */}\r\n                <div className='flex flex-col lg:row-span-2 lg:border-r-2 lg:border-b-2 border-b-2 lg:border-gray-300 gap-2 w-full hover:bg-gray-100'>\r\n                    <Percentage objName={'ValuePropositions'} />\r\n                    <EditableDiv list={Text.thirdBox.questions} title={Text.thirdBox.title} objName={'ValuePropositions'} />\r\n                </div>\r\n                {/* CustomerRelationships - box */}\r\n                <div className='flex flex-col lg:border-r-2 lg:border-b-2 border-b-2 lg:border-gray-300 gap-2 w-full hover:bg-gray-100'>\r\n                    <Percentage objName={'CustomerRelationships'} />\r\n                    <EditableDiv list={Text.forthBox.questions} title={Text.forthBox.title} objName={'CustomerRelationships'} />\r\n                </div>\r\n                {/* CustomerSegments - box */}\r\n                <div className='flex flex-col lg:row-span-2 lg:border-b-2 border-b-2 lg:border-gray-300 gap-2 w-full hover:bg-gray-100'>\r\n                    <Percentage objName={'CustomerSegments'} />\r\n                    <EditableDiv list={Text.fifthBox.questions} title={Text.fifthBox.title} objName={'CustomerSegments'} />\r\n                </div>\r\n                {/* KeyResources - box */}\r\n                <div className='flex flex-col lg:border-b-2 lg:border-r-2 border-b-2 lg:border-gray-300 gap-2 w-full hover:bg-gray-100'>\r\n                    <Percentage objName={'KeyResources'} />\r\n                    <EditableDiv list={Text.sixthBox.questions} title={Text.sixthBox.title} objName={'KeyResources'} />\r\n                </div>\r\n                {/* Channels - box */}\r\n                <div className='flex flex-col lg:border-r-2 lg:border-b-2 border-b-2 lg:border-gray-300 gap-2 w-full hover:bg-gray-100'>\r\n                    <Percentage objName={'Channels'} />\r\n                    <EditableDiv list={Text.seventhBox.questions} title={Text.seventhBox.title} objName={'Channels'} />\r\n                </div>\r\n                {/* CostStructure - box */}\r\n                <div className='flex flex-col lg:row-span-2 lg:col-span-2 lg:border-r-2 2xl:border-b-0 xl:border-b-0 lg:border-b-0 border-b-2 lg:border-gray-300 gap-2 w-full hover:bg-gray-100'>\r\n                    <Percentage objName={'CostStructure'} />\r\n                    <EditableDiv list={Text.eightBox.questions} title={Text.eightBox.title} objName={'CostStructure'} />\r\n                </div>\r\n                {/* RevenueStreams - box */}\r\n                <div className='flex flex-col lg:row-span-2 lg:col-span-3 2xl:border-b-0 xl:border-b-0 lg:border-b-0 border-b-2 lg:border-gray-300 gap-2 w-full hover:bg-gray-100'>\r\n                    <Percentage objName={'RevenueStreams'} />\r\n                    <EditableDiv list={Text.ninthBox.questions} title={Text.ninthBox.title} objName={'RevenueStreams'} />\r\n                </div>\r\n            </div>\r\n            <div className=\"flex mt-1 px-5\">\r\n                <p className='w-3/4'>\r\n                    Lorem ipsum, dolor sit amet consectetur adipisicing elit. Illo suscipit tempore culpa delectus labore ea ab id nulla eos, repudiandae at, natus in! Numquam doloremque nihil ea qui, minus optio.\r\n                </p>\r\n                <div className='flex ml-auto gap-3'>\r\n                    <button\r\n                        onClick={() => console.log(form)}\r\n                        className=\"bg-primary text-white p-2 font-medium flex gap-3 justify-center items-center hover:bg-opacity-80 px-3 rounded-lg\">\r\n                        <BiDownload\r\n                            className=\"text-xl\"\r\n                        />\r\n                        Download\r\n                    </button>\r\n                    <button\r\n                        onClick={() => dispatch({ type: \"RESET_STATE\" })}\r\n                        className=\"bg-primary text-white p-2 font-medium flex gap-3 justify-center items-center hover:bg-opacity-80 px-3 rounded-lg\">\r\n                        Clear Template\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            <div className='flex flex-col gap-2'>\r\n                <h1 className='text-3xl font-bold'>Brainstorming Notes</h1>\r\n                <p>Write down you thought here and then move them to necessary section.</p>\r\n                <BrainstormingSec objName={'BrainstormingNotes'} />\r\n            </div>\r\n            {/* <div>\r\n                <PDFViewer height={500} width={\"100%\"}>\r\n                    <BMCPdf form={form} />\r\n                </PDFViewer>\r\n            </div> */}\r\n        </div >\r\n    )\r\n}\r\n\r\nconst LoadingBtn = () => {\r\n    <button\r\n        disabled\r\n        className=\"bg-primary text-white p-2 font-medium flex gap-3 justify-center items-center hover:bg-opacity-80 px-3 rounded-lg cursor-wait\">\r\n        <svg className=\"h-20 w-20 animate-spin\" viewBox=\"3 3 18 18\">\r\n            <path\r\n                className=\"fill-white\"\r\n                d=\"M12 5C8.13401 5 5 8.13401 5 12C5 15.866 8.13401 19 12 19C15.866 19 19 15.866 19 12C19 8.13401 15.866 5 12 5ZM3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12Z\"></path>\r\n            <path\r\n                className=\"fill-primary\"\r\n                d=\"M16.9497 7.05015C14.2161 4.31648 9.78392 4.31648 7.05025 7.05015C6.65973 7.44067 6.02656 7.44067 5.63604 7.05015C5.24551 6.65962 5.24551 6.02646 5.63604 5.63593C9.15076 2.12121 14.8492 2.12121 18.364 5.63593C18.7545 6.02646 18.7545 6.65962 18.364 7.05015C17.9734 7.44067 17.3403 7.44067 16.9497 7.05015Z\"></path>\r\n        </svg>\r\n        Loading\r\n    </button>\r\n}"],"names":["module","exports","firstBox","title","questions","secondBox","thirdBox","forthBox","fifthBox","sixthBox","seventhBox","eightBox","ninthBox","useGlobalState","context","useContext","GlobalState","Error","limits","KeyPartnerships","KeyActivities","ValuePropositions","CustomerRelationships","CustomerSegments","Channels","KeyResources","RevenueStreams","CostStructure","BrainstormingNotes","TextInputField","_ref","setInpActive","objName","containerRef","useRef","_useState","useState","_useState2","_slicedToArray","inpValue","setInpValue","_useGlobalState","dispatch","form","useEffect","handleEnter","e","keyCode","list","length","type","payload","_objectSpread","_defineProperty","concat","_toConsumableArray","console","log","document","addEventListener","handleEsc","handleClickOutside","current","contains","target","removeEventListener","handleFontStyle","fontStyle","execCommand","_jsxs","ref","children","_jsx","className","role","contentEditable","onClick","onInput","_step","allowedTags","doc","DOMParser","parseFromString","innerHTML","validatedContent","_iterator","_createForOfIteratorHelper","body","childNodes","s","n","done","node","value","nodeType","Node","TEXT_NODE","textContent","includes","tagName","toLowerCase","attrs","Array","from","attributes","map","attr","name","join","err","f","startsWith","replace","RegExp","fontLink","links","prompt","handleFontLink","BiLink","fontUnLink","BiUnlink","EditInput","handleEdit","index","setNewInpValue","valueToEdit","window","dangerouslySetInnerHTML","__html","List","newInpValue","_useState3","_useState4","showMenu","setShowMenu","onDoubleClick","RxDragHandleDots2","RiEditBoxLine","updatedList","filter","partner","handleDelete","RiDeleteBinLine","EditableDiv","_form$objName$list","inpActive","dragItem","dragOverItem","handleSort","_text","draggedItemContent","splice","newValue","newItems","_Fragment","BsExclamationLg","draggable","onDragStart","onDragEnter","onDragEnd","onDragOver","preventDefault","React","objeName","maxLen","Math","floor","handleTopPercentage","BrainstormingSec","input","setInput","Font","family","format","fonts","src","RobotoBold","RobotoItalic","RobotoBoldItalic","styles","StyleSheet","page","flexDirection","backgroundColor","invoiceDateContainer","justifyContent","margin","label","fontSize","tableContainer","flexWrap","marginTop","marginBottom","marginLeft","borderWidth","borderColor","width","firstRow","height","borderLeft","borderTop","firstRowInner","borderRight","firstRowLastCol","secRow","borderBottom","borderRightNone","border","marginHorizontal","marginVertical","fontFamily","fontWeight","BMCPdf","handleTag","ele","bold","italic","link","text","htmlDoc","getElementsByTagName","i","element","getAttribute","data","View","style","Text","RobotoRegular","classStyle","Link","Document","Page","size","orientation","Percentage","BMCModule","setPage","setLength","_useState5","_useState6","id","setId","handlePostForm","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","axios","stop","apply","arguments","fetchData","_ref2","_callee2","_yield$axios$get","_yield$axios$get$data","formData","_length","_context2","sent","_id","t0","PDFDownloadLink","Suspense","fallback","LoadingBtn","fileName","BiDownload"],"sourceRoot":""}